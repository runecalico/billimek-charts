apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "plex.fullname" . }}
  labels:
    {{- include "plex.labels" . | nindent 4 }}
  {{- if .Values.deploymentAnnotations }}
  annotations:
    {{- range $key, $value := .Values.deploymentAnnotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      {{- include "plex.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "plex.selectorLabels" . | nindent 8 }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
  {{- if or .Values.certificate.pkcsMangler.enabled .Values.addons.lambda.enabled .Values.addons.AbsoluteSeriesScanner.enabled .Values.addons.hama.enabled }}
      initContainers:
      # This is ugly, but it does work to create a pks file that will work with PLEX from the tls.crt and tls.key that cert-manager normally creates
      {{- if .Values.certificate.pkcsMangler.enabled }}
      - name: pkcsmangler-init-container
        image: tlsprint/openssl:1.1.1f
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args: ["-c", "openssl pkcs12 -export -passout pass:$(PKCSMANGLER_PFXPASSWORD) -out /shared/cert.pfx -inkey {{ .Values.certificate.pkcsMangler.certificateSecret.volume.mountPath }}/{{ .Values.certificate.pkcsMangler.certificateSecret.keyName }} -in {{ .Values.certificate.pkcsMangler.certificateSecret.volume.mountPath }}/{{ .Values.certificate.pkcsMangler.certificateSecret.crtName }}; chmod 0444 /shared/cert.pfx"]
        env:
          - name: "PKCSMANGLER_PFXPASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ .Values.certificate.pkcsMangler.pfxPassword.secretName }}
                key: {{ .Values.certificate.pkcsMangler.pfxPassword.passwordKey }}
        volumeMounts:
        - name: shared
          mountPath: /shared
        - name: {{ .Values.certificate.pkcsMangler.certificateSecret.volume.name }}
          mountPath: {{ .Values.certificate.pkcsMangler.certificateSecret.volume.mountPath }}
      {{- end }}
      {{- if .Values.addons.lambda.enabled }}
      - name: lambda-init-container
        image: alpine:latest
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args: ["-c", "{{ .Values.addons.lambda.volume.mountPath }}"]
        env:
          - name: "OVERWRITE_EXISTING_PLUGIN"
            value: "true"
          - name: "TMPDIR"
            value: "/tmp"
          - name: "CONFIG_DIR"
            value: "/config"
          - name: "PINAME"
            value: "Lambda.bundle"
        volumeMounts:
          - name: config
            mountPath: /config
          {{- if .Values.persistence.config.subPath }}
            subPath: {{ .Values.persistence.config.subPath }}
          {{ end }}
          - name: {{ .Values.addons.lambda.volume.name }}
            mountPath: {{ .Values.addons.lambda.volume.mountPath }}
            subPath: {{ .Values.addons.lambda.volume.subPath }}
      {{- end }}
      {{- if .Values.addons.hama.enabled }}
      - name: hama-init-container
        image: alpine:latest
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args: ["-c", "{{ .Values.addons.hama.volume.mountPath }}"]
        env:
          - name: "OVERWRITE_EXISTING_PLUGIN"
            value: "true"
          - name: "TMPDIR"
            value: "/tmp"
          - name: "CONFIG_DIR"
            value: "/config"
          - name: "PINAME"
            value: "Hama.bundle"
        volumeMounts:
          - name: config
            mountPath: /config
          {{- if .Values.persistence.config.subPath }}
            subPath: {{ .Values.persistence.config.subPath }}
          {{ end }}
          - name: {{ .Values.addons.hama.volume.name }}
            mountPath: {{ .Values.addons.hama.volume.mountPath }}
            subPath: {{ .Values.addons.hama.volume.subPath }}
      {{- end }}
      {{- if .Values.addons.AbsoluteSeriesScanner.enabled }}
      - name: absoluteseriesscanner-init-container
        image: alpine:latest
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args: ["-c", "{{ .Values.addons.AbsoluteSeriesScanner.volume.mountPath }}"]
        env:
          - name: "OVERWRITE_EXISTING_PLUGIN"
            value: "true"
          - name: "TMPDIR"
            value: "/tmp"
          - name: "CONFIG_DIR"
            value: "/config"
          - name: "PINAME"
            value: "AbsoluteSeriesScanner"
          {{- if .Values.plexUid }}
          - name: "PLEX_UID"
            value: "{{.Values.plexUid}}"
          {{- end }}
          {{- if .Values.plexGid }}
          - name: "PLEX_GID"
            value: "{{.Values.plexGid}}"
          {{- end }}
        volumeMounts:
          - name: config
            mountPath: /config
          {{- if .Values.persistence.config.subPath }}
            subPath: {{ .Values.persistence.config.subPath }}
          {{ end }}
          - name: {{ .Values.addons.AbsoluteSeriesScanner.volume.name }}
            mountPath: {{ .Values.addons.AbsoluteSeriesScanner.volume.mountPath }}
            subPath: {{ .Values.addons.AbsoluteSeriesScanner.volume.subPath }}
      {{- end }}
  {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: pms
              containerPort: 32400
          env:
          - name: TZ
            value: "{{ .Values.timezone }}"
          # TODO: move this to a secret?
          - name: PLEX_CLAIM
            value: "{{ .Values.claimToken }}"
          # plex env vars
          - name: PMS_INTERNAL_ADDRESS
            value: http://{{ template "plex.fullname" . }}:32400
          - name: PMS_IMAGE
            value: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          - name: KUBE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: TRANSCODE_PVC
  {{- if .Values.persistence.transcode.claimName }}
            value: "{{ .Values.persistence.transcode.claimName }}"
  {{- else }}
            value: "{{ template "plex.fullname" . }}-transcode"
  {{- end }}
          - name: DATA_PVC
  {{- if .Values.persistence.data.claimName }}
            value: "{{ .Values.persistence.data.claimName }}"
  {{- else }}
            value: "{{ template "plex.fullname" . }}-data"
  {{- end }}
          - name: CONFIG_PVC
  {{- if .Values.persistence.config.claimName }}
            value: "{{ .Values.persistence.config.claimName }}"
  {{- else }}
            value: "{{ template "plex.fullname" . }}-config"
  {{- end }}
  {{- if .Values.proxy.enabled }}
    {{- if .Values.proxy.http }}
          - name: "HTTP_PROXY"
            value: "{{.Values.proxy.http}}"
    {{- end }}
    {{- if .Values.proxy.https }}
          - name: "HTTPS_PROXY"
            value: "{{.Values.proxy.https}}"
    {{- end }}
    {{- if .Values.proxy.noproxy }}
          - name: "NO_PROXY"
            value: "{{.Values.proxy.noproxy}}"
    {{- end }}
  {{- end }}
  {{- if .Values.advertiseIp }}
          - name: "ADVERTISE_IP"
            value: "{{.Values.advertiseIp}}"
{{- end }}
{{- if .Values.changeConfigDirOwnership }}
          - name: "CHANGE_CONFIG_DIR_OWNERSHIP"
            value: "{{.Values.changeConfigDirOwnership}}"
{{- end }}
{{- if .Values.allowedNetworks }}
          - name: "ALLOWED_NETWORKS"
            value: "{{include "joinListWithComma" .Values.allowedNetworks}}"
{{- end }}
{{- if .Values.plexUid }}
          - name: "PLEX_UID"
            value: "{{.Values.plexUid}}"
{{- end }}
{{- if .Values.plexGid }}
          - name: "PLEX_GID"
            value: "{{.Values.plexGid}}"
{{- end }}
# Extra ENV Values supplied by user
{{- range $key, $value := .Values.extraEnv }}
          - name: {{ $key }}
            value: {{ $value }}
{{- end }}
# This is part of pkcsMangler
{{- if .Values.certificate.pkcsMangler.enabled }}
          - name: "PKCSMANGLER_PFXINCONTAINERPATH"
            value: "{{.Values.certificate.pkcsMangler.pfxInContainerPath}}"
{{- if .Values.certificate.pkcsMangler.setPlexPreferences.enabled }}
          - name: "PKCSMANGLER_PFXPASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ .Values.certificate.pkcsMangler.pfxPassword.secretName }}
                key: {{ .Values.certificate.pkcsMangler.pfxPassword.passwordKey }}
          - name: "PKCSMANGLER_CUSTOMCERTDOMAIN"
            value: "customCertificateDomain={{.Values.certificate.pkcsMangler.plexPreferences.customCertificateDomain}}"
{{- end }}
{{- end }}
          readinessProbe:
            httpGet:
              path: /identity
              port: 32400
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: /identity
              port: 32400
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          volumeMounts:
          - name: data
            mountPath: /data
          {{- if .Values.persistence.data.subPath }}
            subPath: {{ .Values.persistence.data.subPath }}
          {{ end }}
          - name: config
            mountPath: /config
          {{- if .Values.persistence.config.subPath }}
            subPath: {{ .Values.persistence.config.subPath }}
          {{ end }}
          - name: transcode
            mountPath: /transcode
          {{- if .Values.persistence.transcode.subPath }}
            subPath: {{ .Values.persistence.transcode.subPath }}
          {{ end }}
          {{-  range .Values.persistence.extraData }}
          - mountPath: "/data-{{ .name }}"
            name: "extradata-{{ .name }}"
          {{- end }}
          - name: shared
            mountPath: /shared
          {{- if .Values.plexPreferences.enabled }}
          - name: {{ .Values.plexPreferences.volume.name }}
            mountPath: {{ .Values.plexPreferences.volume.mountPath }}
            subPath: {{ .Values.plexPreferences.volume.subPath }}
          {{- end }}
          {{- if .Values.certificate.pkcsMangler.enabled }}
          - name: {{ .Values.certificate.pkcsMangler.volume.name }}
            mountPath: {{ .Values.certificate.pkcsMangler.volume.mountPath }}
            subPath: {{ .Values.certificate.pkcsMangler.volume.subPath }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
{{- if .Values.persistence.data.claimName }}
          claimName: "{{ .Values.persistence.data.claimName }}"
{{- else }}
          claimName: "{{ template "plex.fullname" . }}-data"
{{- end }}
      - name: config
        persistentVolumeClaim:
{{- if .Values.persistence.config.claimName }}
          claimName: "{{ .Values.persistence.config.claimName }}"
{{- else }}
          claimName: "{{ template "plex.fullname" . }}-config"
{{- end }}
      - name: transcode
{{- if .Values.persistence.transcode.enabled }}
        persistentVolumeClaim:
{{- if .Values.persistence.transcode.claimName }}
          claimName: "{{ .Values.persistence.transcode.claimName }}"
{{- else }}
          claimName: "{{ template "plex.fullname" . }}-transcode"
{{- end }}
{{- else }}
{{- if .Values.persistence.transcode.emptyDir.medium }}
        emptyDir:
          medium: "{{ .Values.persistence.transcode.emptyDir.medium }}"
{{- else }}
        emptyDir: {}
{{- end }}
{{- end }}
{{-  range .Values.persistence.extraData }}
      - name: "extradata-{{ .name }}"
        persistentVolumeClaim:
{{- if .claimName }}
          claimName: "{{ .claimName }}"
{{- else }}
          claimName: "extradata-{{ .name }}"
{{- end }}
{{- end }}
      - name: shared
        emptyDir: {}
      {{- if .Values.plexPreferences.enabled }}
      - name: {{ .Values.plexPreferences.volume.name }}
        configMap:
          name: {{ .Values.plexPreferences.configmap.name }}
          defaultMode: {{ .Values.plexPreferences.volume.defaultMode }}
      {{- end }}
      {{- if .Values.addons.lambda.enabled }}
      - name: {{ .Values.addons.lambda.volume.name }}
        configMap:
          name: {{ .Values.addons.lambda.configmap.name }}
          defaultMode: {{ .Values.addons.lambda.volume.defaultMode }}
      {{- end }}
      {{- if .Values.addons.hama.enabled }}
      - name: {{ .Values.addons.hama.volume.name }}
        configMap:
          name: {{ .Values.addons.hama.configmap.name }}
          defaultMode: {{ .Values.addons.hama.volume.defaultMode }}
      {{- end }}
      {{- if .Values.addons.AbsoluteSeriesScanner.enabled }}
      - name: {{ .Values.addons.AbsoluteSeriesScanner.volume.name }}
        configMap:
          name: {{ .Values.addons.AbsoluteSeriesScanner.configmap.name }}
          defaultMode: {{ .Values.addons.AbsoluteSeriesScanner.volume.defaultMode }}
      {{- end }}
      {{- if .Values.certificate.pkcsMangler.enabled }}
      - name: {{ .Values.certificate.pkcsMangler.volume.name }}
        configMap:
          name: {{ .Values.certificate.pkcsMangler.configmap.name }}
          defaultMode: {{ .Values.certificate.pkcsMangler.volume.defaultMode }}
      - name: {{ .Values.certificate.pkcsMangler.certificateSecret.volume.name }}
        secret:
          secretName: {{ .Values.certificate.pkcsMangler.certificateSecret.name  }}
      {{- end }}
##### VOLUMES END  #####
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
